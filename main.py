# TODO:
# 1. Admin-–∫–æ–º–∞–Ω–¥—ã
# 2. ?

from aiogram import Bot, Dispatcher, executor, types
import logging
import sqlite3
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from pyqiwip2p import QiwiP2P
from pyqiwip2p.p2p_types import QiwiCustomer, QiwiDatetime
import aioschedule
import asyncio



connect = sqlite3.connect("base.db")
cursor = connect.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS affairs (
    affair VARCHAR(256),
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER(11)
    )""")

logging.basicConfig(level=logging.INFO)
bot = Bot(token="5172964049:AAFrvny8WcjjeCJbhB7btgWg9E8JjKgnsCo")
dp = Dispatcher(bot)
p2p = QiwiP2P(auth_key="eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Inc0dW5jai0wMCIsInVzZXJfaWQiOiI3OTgwMzI1MzMzNSIsInNlY3JldCI6IjNjNTYzNGM1YjZkM2IzYTJhOTJmNzliNDQwNjMzYzNlZTc5M2U5NTdiZDk5OTY2ODA5OGZkYjZlYzkwNWYxNDEifX0=")

def affair_add(affair, id):
    connect = sqlite3.connect("base.db")
    cursor = connect.cursor()
    cursor.execute("""INSERT INTO affairs (affair, user_id) VALUES (?, ?)""", [affair, id])
    connect.commit()
    connect.close() 
def affair_delete(affair, id):
    connect = sqlite3.connect("base.db")
    cursor = connect.cursor()
    info = cursor.execute("""SELECT affair FROM affairs WHERE affair = ?""", [affair])
    h_affair = info.fetchall()
    if len(h_affair) == 1:
        cursor.execute("""DELETE FROM affairs WHERE user_id = ? AND affair = ?""", [id, affair])
        connect.commit()
        connect.close() 
        return "–î–µ–ª–æ \"" + str(affair) + "\" —É–¥–∞–ª–µ–Ω–æ"
    else: 
        return "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–≥–æ –¥–µ–ª–∞!"

def finish_affair(affair, id):
    connect = sqlite3.connect("base.db")
    cursor = connect.cursor()
    info = cursor.execute("""SELECT affair FROM affairs WHERE affair = ?""", [affair])
    h_affair = info.fetchall()
    if len(h_affair) == 1:
        cursor.execute("""DELETE FROM affairs WHERE user_id = ? AND affair = ?""", [id, affair])
        connect.commit()
        connect.close() 
        return "–î–µ–ª–æ \"" + str(affair) + "\" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    else: 
        return "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–≥–æ –¥–µ–ª–∞!"

        

def affair_show(id):
    connect = sqlite3.connect("base.db")
    cursor = connect.cursor()
    cursor.execute("""SELECT affair FROM affairs WHERE user_id = ?""", [id])
    affairs = cursor.fetchall()
    result = "–°–ø–∏—Å–æ–∫ –¥–µ–ª:\n"
    count = 1
    for affair in affairs:
        result += str(count)+". "+str(affair[0]) + "\n"
        count += 1
    return result

def donate(amount):
    lifetime = 15 
    comment = '–ù–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ' 
    bill = p2p.bill(amount=amount, lifetime=lifetime, comment=comment) 
    return f'–°—É–º–º–∞: {amount}\n–°—Å—ã–ª–∫–∞ –∂–∏–≤–µ—Ç: {lifetime} –º–∏–Ω—É—Ç\n–°—Å—ã–ª–∫–∞:\n{bill.pay_url}'

def insert_id_to_bd(id):
    connect = sqlite3.connect("base.db")
    cursor = connect.cursor()
    cursor.execute("""INSERT INTO affairs (user_id) VALUES (?)""", [id])
    connect.commit()
    connect.close()

def get_users_id():
    connect = sqlite3.connect("base.db")
    cursor = connect.cursor()
    cursor.execute("""SELECT user_id FROM affairs""")
    users_ids = cursor.fetchall()
    users = []
    for user in users_ids:
        users.append(user[0])
    return users

def get_user_affairs_count(user_id):
    connect = sqlite3.connect("base.db")
    cursor = connect.cursor()
    cursor.execute("""SELECT COUNT(affair) FROM affairs WHERE user_id = ?""", [user_id])
    result = cursor.fetchall()
    return result[0][0]


btn_add_affair = "üíº–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æüíº"
btn_donate = "$ –î–æ–Ω–∞—Ç–∏–∫ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ $"
btn_show_affair = "üíº–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –¥–µ–ª–∞üíº"
btn_delete_affair = "‚ùå–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ‚ùå"
btn_finish_affair = "üåü–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–æüåü"
btn_info = "?–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?"
start_menu = ReplyKeyboardMarkup(resize_keyboard=True)
start_menu.add(btn_donate, btn_add_affair, btn_show_affair, btn_delete_affair, btn_finish_affair, btn_info)

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    id = message.from_user.id
    insert_id_to_bd(id)
    await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –¥–ª—è –¥–µ–ª! –ü–∏—à–∏ –≤ –º–µ–Ω—è —Å–≤–æ–∏ –¥–µ–ª–∞, –∞ —è –∑–∞–ø–æ–º–Ω—é –∏ –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –±—É–¥–µ—Ç –∏—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å!\n–ö–æ–º–∞–Ω–¥—ã:\n–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ -- /del <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å>\n–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ -- /add <–≤–∞—à–µ –¥–µ–ª–æ>\n–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–æ -- /finish <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å>\n–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 8:30\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -- /info", reply_markup=start_menu)


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == "üíº–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æüíº":
        await bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: '/add <–≤–∞—à–µ –¥–µ–ª–æ>'")
    if message.text == "?–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?":
        await bot.send_message(message.from_user.id, "–ö–æ–º–∞–Ω–¥—ã:\n–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ -- /del <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å>\n–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ -- /add <–≤–∞—à–µ –¥–µ–ª–æ>\n–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–æ -- /finish <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -- /info\n–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 8:30\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start ")
    if message.text == "/info":
        await bot.send_message(message.from_user.id, "–ö–æ–º–∞–Ω–¥—ã:\n–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ -- /del <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å>\n–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ -- /add <–≤–∞—à–µ –¥–µ–ª–æ>\n–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–æ -- /finish <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -- /info\n–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 8:30\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start ")    
    if message.text == "üíº–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –¥–µ–ª–∞üíº":
        id = message.from_user.id
        await bot.send_message(message.from_user.id, affair_show(id))
    if message.text == "‚ùå–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ‚ùå":
        await bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: '/del <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å>'")
    if message.text == "üåü–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–æüåü":
        await bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: '/finish <–¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å>'")
    if "/add" in message.text.lower() and message.text.lower().replace("/add", "").strip() != None:
        id = message.from_user.id
        affair = message.text.lower().replace("/add", "").strip()
        affair_add(affair, id)
        await bot.send_message(message.from_user.id, "–í–∞—à–µ –¥–µ–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    if message.text == "$ –î–æ–Ω–∞—Ç–∏–∫ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ $":
        await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: '/donate <—Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞>' —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –¥–µ–Ω—é–∂–∫–æ–π")
    if "/donate" in message.text.lower():
        amount = message.text.lower().replace("/donate", "").strip()
        await bot.send_message(message.from_user.id, donate(amount)+'\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç–∏–∫!')
    if "/del" in message.text.lower():
        id = message.from_user.id
        affair = message.text.lower().replace("/del", "").strip()
        await bot.send_message(message.from_user.id, affair_delete(affair, id))
    if "/finish" in message.text.lower():
        id = message.from_user.id
        affair = message.text.lower().replace("/finish", "").strip()
        await bot.send_message(message.from_user.id, finish_affair(affair, id))
    if "/time" in message.text.lower():
        amount = message.text.lower().replace("/time", "").strip()
        await bot.send_message(message.from_user.id, "11")
    if message.text == "/adminmode c_users":
        id = message.from_user.id
        await bot.send_message(message.from_user.id, "–í –≤–∞—à –±–æ—Ç –∑–∞—Ö–æ–¥–∏–ª–∏ " + str(len(get_users_id())) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


async def notifications():
    for user in set(get_users_id()):
        if get_user_affairs_count(user) == 1:   
            await bot.send_message(user, "–£ –≤–∞—Å –µ—Å—Ç—å " + str(get_user_affairs_count(user)) + " –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–ª–æ!")
        if get_user_affairs_count(user) >= 5:   
            await bot.send_message(user, "–£ –≤–∞—Å –µ—Å—Ç—å " + str(get_user_affairs_count(user)) + " –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª!")
        else:
            await bot.send_message(user, "–£ –≤–∞—Å –µ—Å—Ç—å " + str(get_user_affairs_count(user)) + " –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª–∞!")

async def scheduler():
    aioschedule.every(60).minutes.do(notifications)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
        
async def on_startup(dp): 
    asyncio.create_task(scheduler())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)










